@import: context
@import: config

type align =
  | Start
  | End
  | Center
  | SpaceBetween
  | SpaceEvenly

module ShinchokuTairikuCmd : sig

  direct \emph : [inline-text] inline-cmd
  direct \footnote : [inline-text] inline-cmd
  direct \url : [string] inline-cmd
  direct \minipage : [float; block-text] inline-cmd
  direct \code : [string] inline-cmd
  direct \line-break : [] inline-cmd
  direct \ref : [string] inline-cmd
  direct +p : [inline-text] block-cmd
  direct +row : [align?; inline-text list] block-cmd
  direct +column : [inline-text; block-text] block-cmd

end = struct

  let-inline ctx \emph it =
    let ctx = Context.set-font Config.font-cjk-gothic ctx in
    read-inline ctx it

  let-inline ctx \footnote it =
    let symbol = {†} in
    let ctx-symbol size =
      ctx
      |> set-font-size (size *' 0.75)
      |> set-manual-rising (size *' 0.35)
    in
    let label = Util.or-fresh-label None in
    let ibf num =
      let it-num = embed-string (arabic num) in
      read-inline (ctx-symbol Config.font-size-normal) {#symbol;#it-num;} |> Util.link-to label
    in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let font-size = Config.font-size-footnote in
      let ib-symbol =
        inline-skip 14pt
        ++ (read-inline (ctx-symbol font-size) {#symbol;#it-num;} |> Util.set-link label)
        ++ inline-skip 3pt
      in
      let symbol-width = get-natural-width ib-symbol in
      let text-width = get-text-width ctx in
      let ib = read-inline (ctx |> set-font-size font-size) {#it;} in
      let ctx =
        ctx
        |> set-paragraph-margin 3pt 3pt
        |> set-leading (font-size *' 1.2)
      in
      let ib =
        embed-block-top ctx (text-width -' symbol-width) (fun ctx -> line-break false false ctx (ib ++ inline-fil))
      in
      line-break false false ctx (ib-symbol ++ ib)
    in
    FootnoteScheme.main (ctx |> set-font-size 5pt) ibf bbf

  let-inline ctx \url url =
    let ctx = Context.set-latin-font Config.font-mono ctx in
    read-inline ctx {\href(url)(embed-string url);}

  let-inline ctx \code code =
    let pads = (4pt, 4pt, 4pt, 4pt) in
    let decoset = HDecoSet.rectangle-round-fill 2pt 2pt (Color.gray 0.95) in
    let ctx = Context.set-latin-font Config.font-mono ctx in
    let ib =
      embed-string code
      |> read-inline ctx
      |> inline-frame-breakable pads decoset
    in
    script-guard Latin ib

  let-inline ctx \minipage ratio inner =
    let width = get-text-width ctx *' ratio in
    embed-block-top ctx width (fun ctx -> read-block ctx inner)

  let-inline ctx \line-break =
    discretionary (0 - 10000) inline-nil inline-fil inline-nil

  let-inline ctx \ref label =
    get-cross-reference (label ^ `:num`)
    |> Option.from `?`
    |> embed-string
    |> read-inline ctx
    |> Util.link-to label

  let-block ctx +p it =
    let ib = inline-skip 10pt ++ read-inline ctx it ++ inline-fil in
    form-paragraph ctx ib

  let inline-join start endd delim ibs =
    let-rec f l =
      match l with
      | [] -> inline-nil
      | [x] -> x
      | x :: xs -> x ++ delim ++ f xs
    in
    start ++ f ibs ++ endd

  let-block ctx +row ?:alignopt its =
    let align = Option.from SpaceEvenly alignopt in
    let ibs = List.map (read-inline ctx) its in
    let ib =
      match align with
      | Start -> inline-join inline-nil inline-fil inline-nil ibs
      | End -> inline-join inline-fil inline-nil inline-nil ibs
      | Center -> inline-join inline-fil inline-fil inline-nil ibs
      | SpaceBetween -> inline-join inline-nil inline-nil inline-fil ibs
      | SpaceEvenly -> inline-join inline-fil inline-fil inline-fil ibs
    in
    line-break true true ctx ib

  let-block ctx +column title inner =
    let make-title ctx =
      let ctx =
        ctx
        |> Context.set-font Config.font-cjk-gothic-bold
        |> set-font-size Config.font-size-large
        |> set-paragraph-margin 10pt 10pt
      in
      read-inline ctx {コラム:} ++ inline-skip 3pt ++ read-inline ctx title
      |> line-break true false ctx
    in
    let make-inner ctx =
      let ctx = set-paragraph-margin Config.paragraph-margin-top Config.paragraph-margin-bottom ctx in
      read-block ctx inner
    in
    let decoset = VDecoSet.simple-frame-stroke 1pt (Color.gray 0.5) in
    let pads = (8pt, 8pt, 8pt, 8pt) in
    let ctx-outer = set-paragraph-margin 20pt 20pt ctx in
    block-frame-breakable ctx-outer pads decoset
      (fun ctx -> make-title ctx +++ make-inner ctx)

end
