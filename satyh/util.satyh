@require: gr
@require: annot

type font = string * float * float

type page-side =
  | LeftSide
  | RightSide

module PageSide : sig
  val of-page-number : int -> page-side
end = struct
  let of-page-number pn = if pn mod 2 == 0 then LeftSide else RightSide
end

module Util : sig

  val or-fresh-label : string option -> string
  val draw-horizontal-line : length ?-> color ?-> length -> length -> length -> inline-boxes
  val link-to : string -> inline-boxes -> inline-boxes
  val set-link : string -> inline-boxes -> inline-boxes
  val set-link-block : context -> string -> block-boxes -> block-boxes

end = struct

  let or-fresh-label =
    let-mutable count <- 0 in
    let or opt =
      match opt with
      | None ->
        let () = increment count in
        `generated:` ^ arabic !count
      | Some l -> l
    in
    or

  let draw-horizontal-line ?:topt ?:coloropt width margin-top margin-bottom =
    let t = Option.from 0.5pt topt in
    let color = Option.from Color.black coloropt in
    let stroke-line (x, y) =
      [ stroke t color (Gr.line (x, y) (x +' width, y)) ]
    in
    inline-graphics width margin-top margin-bottom stroke-line

  let link-to label ib =
    inline-frame-breakable (0pt, 0pt, 0pt, 0pt) (Annot.link-to-location-frame label None) ib

  let set-link label ib =
    inline-frame-breakable (0pt, 0pt, 0pt, 0pt) (Annot.register-location-frame label) ib

  let set-link-block ctx label bb =
    block-frame-breakable ctx (0pt, 0pt, 0pt, 0pt) (Annot.register-location-frame label) (fun _ -> bb)

end
