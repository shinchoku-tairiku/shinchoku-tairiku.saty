@require: code
@require: list

@import: context
@import: config
@import: link
@import: label

module CaptionedBox : sig

  val set-chapter : int -> unit
  direct +figure : [string?; length?; string; inline-text] block-cmd
  direct +code : [string?; string; inline-text] block-cmd
  direct +table : [string?; (inline-text list) list; inline-text ] block-cmd

end = struct

  let inner-margin = 8pt
  let outer-margin = 20pt

  let-mutable current-chapter-ref <- 0

  let scheme ctx labelopt num-ref kind caption inner =
    let () = increment num-ref in
    let num = arabic !current-chapter-ref ^ `.` ^ arabic !num-ref in
    let label = Label.or-fresh labelopt in
    let () = register-cross-reference (label ^ `:num`) num in
    %% caption
    let it-num = embed-string num in
    let ctx-caption =
      ctx
      |> Context.set-font Config.font-cjk-gothic
      |> set-font-size Config.font-size-small
      |> set-paragraph-margin inner-margin outer-margin
    in
    let ib-caption =
      read-inline (ctx-caption |> set-text-color (Color.gray 0.5)) {▶}
      ++ read-inline ctx-caption {#kind;#it-num;}
      ++ inline-skip 10pt
      ++ read-inline ctx-caption caption
    in
    let bb-caption =
      inline-fil ++ ib-caption ++ inline-fil
      |> line-break false true ctx-caption
    in

    inner +++ bb-caption |> Link.set-block ctx label

  let-mutable figure-num-ref <- 0
  let-block ctx +figure ?:labelopt ?:widthopt path caption =
    %% image
    let pdf = load-pdf-image path 1 in
    let width = Option.from (get-text-width ctx *' 0.5) widthopt in
    let ib-image = use-image-by-width pdf width in
    let ctx-image = set-paragraph-margin outer-margin inner-margin ctx in
    let bb-image =
      inline-fil ++ ib-image ++ inline-fil
      |> line-break true false ctx-image
    in
    scheme ctx labelopt figure-num-ref {図} caption bb-image

  let-mutable code-num-ref <- 0
  let-block ctx +code ?:labelopt code caption =
    let ctx-code =
      ctx
      |> set-paragraph-margin outer-margin inner-margin
      |> set-font-size Config.font-size-small
      |> set-leading (Config.font-size-small *' 1.25)
      |> Context.set-font Config.font-cjk-gothic
    in
    let decoset = VDecoSet.simple-frame 1pt (Color.gray 0.6) (Color.gray 0.9) in
    let bb-code = Code.scheme decoset Color.black ctx-code code in
    scheme ctx labelopt code-num-ref {コード} caption bb-code

  let-mutable table-num-ref <- 0
  let-block ctx +table ?:labelopt ll caption =
    let pads = (6pt, 6pt, 6pt, 6pt) in
    let l it = read-inline ctx it ++ inline-fil in
    let cellss = List.map (List.map (fun it -> NormalCell (pads, l it))) ll in
    let grf xs ys =
      let thin = stroke 0.5pt Color.black in
      let vlines =
        match (ys, List.reverse ys) with
        | (ys :: _, ye :: _) ->
          List.map (fun x -> thin (Gr.line (x, ys) (x, ye))) xs
        | _ -> []
      in
      let hlines =
        match (xs, List.reverse xs) with
        | (xs :: _, xe :: _) ->
          List.map (fun y -> thin (Gr.line (xs, y) (xe, y))) ys
        | _ -> []
      in
      List.append vlines hlines
    in
    let ib = tabular cellss grf in
    let bb = inline-fil ++ ib ++ inline-fil |> line-break true true ctx in
    scheme ctx labelopt table-num-ref {表} caption bb

  let set-chapter c =
    let () = current-chapter-ref <- c in
    let () = code-num-ref <- 0 in
    let () = figure-num-ref <- 0 in
    let () = table-num-ref <- 0 in
    ()

end
