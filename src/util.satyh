@require: gr

type font = string * float * float

module Util : sig

  val or-fresh-label : string option -> string
  val draw-horizontal-line : length ?-> color ?-> length -> length -> length -> inline-boxes

end = struct

  let or-fresh-label =
    let-mutable count <- 0 in
    let or opt =
      match opt with
      | None ->
        let () = increment count in
        `generated:` ^ arabic !count
      | Some l -> l
    in
    or

  let draw-horizontal-line ?:topt ?:coloropt width margin-top margin-bottom =
    let t = Option.from 0.5pt topt in
    let color = Option.from Color.black coloropt in
    let stroke-line (x, y) =
      [ stroke t color (Gr.line (x, y) (x +' width, y)) ]
    in
    inline-graphics width margin-top margin-bottom stroke-line

end
