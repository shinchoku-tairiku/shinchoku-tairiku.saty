@require: pervasives

@import: label
@import: ref-num
@import: ref-page
@import: link

% copied from stdjareport.satyh
module Theorem : sig

  val theorem-scheme : context -> label -> inline-text -> inline-text option -> inline-text -> block-boxes
  val proof-scheme : context -> inline-text option -> block-text -> block-boxes

end = struct

  let-mutable num-ref <- 0

  let theorem-scheme ctx label category wordopt inner =
    let () = increment num-ref in
    let s-num = arabic !num-ref in
    let () = RefNum.set label s-num in
    let it-num = embed-string s-num in
    let ctx-dfn = ctx |> Context.set-latin-font Config.font-latin-bold in
    let page-hook pbinfo _ =
      RefPage.set label pbinfo#page-number
    in
    let ib-dfn =
      read-inline ctx-dfn {#category; #it-num;}
      ++ hook-page-break page-hook
      |> Link.set label
    in
    let ib-word =
      match wordopt with
      | None       -> inline-nil
      | Some(word) -> read-inline ctx {\ (#word;).}
    in
    let ctx-inner = ctx |> Context.set-latin-font Config.font-latin-italic in
    let ib-inner = read-inline ctx-inner inner in
    %% finalize
    ib-dfn
    ++ ib-word
    ++ inline-skip (get-font-size ctx)
    ++ ib-inner
    ++ inline-fil
    |> line-break true true ctx

  let proof-scheme ctx wordopt inner =
    let ib-heading =
      let ctx = ctx |> Context.set-latin-font Config.font-latin-italic in
      match wordopt with
      | None    -> read-inline ctx {Proof.}
      | Some(w) -> read-inline ctx {Proof of #w;.}
    in
    let ib-box = read-inline ctx {â–ª} in
    line-break true false ctx ib-heading
    +++ read-block ctx inner
    +++ line-break false true ctx (inline-fil ++ ib-box)

end
