@require: gr

@import: ../config
@import: ../lib/context
@import: ../lib/page-side

module IndexTab : sig

  val set-num : int -> unit
  val scheme : context -> int -> block-boxes

end = struct

  let rect-width = 13mm
  let rect-height = 25mm
  let rect-round = 3mm
  let rect-start = 35mm

  let-mutable num-ref <- None

  let set-num i =
    num-ref <- Some i

  let draw-rect left right top bottom =
    fill (Color.gray 0.8) (Gr.rectangle-round rect-round (left, top) (right, bottom))

  let draw-num ctx side num left right top bottom =
    let ctx =
      ctx
      |> set-font-size Config.font-size-huge
      |> Context.set-font Config.font-cjk-gothic-bold
      |> set-text-color Color.white
    in
    let ib = read-inline ctx (embed-string (arabic num)) in
    let (width, height, depth) = get-natural-metrics ib in
    let origin =
      match side with
      | LeftSide -> (right -' 2mm -' width, top -' 14mm)
      | RightSide -> (left +' 2mm, top -' 14mm)
    in
    draw-text origin ib

  let scheme ctx pnum =
    match !num-ref with
    | None -> block-nil
    | Some num ->
      let side = PageSide.of-page-number pnum in
      let left =
        match side with
        | LeftSide -> 0pt -' rect-round
        | RightSide -> Config.page-width -' (rect-width -' rect-round)
      in
      let right = left +' rect-width in
      let top = Config.page-height -' (rect-start +' (rect-height *' float num)) in
      let bottom = top -' rect-height in

      let gr-rect = draw-rect left right top bottom in
      let gr-num = draw-num ctx side num left right top bottom in
      let ib = inline-graphics 0pt 0pt 0pt (fun _ -> [gr-rect; gr-num]) in
      line-break true true ctx ib

end
