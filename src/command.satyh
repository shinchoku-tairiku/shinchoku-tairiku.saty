@import: context
@import: config
@import: link

type align =
  | Start
  | End
  | Center
  | SpaceBetween
  | SpaceEvenly

module ShinchokuTairikuCmd : sig

  direct +row : [align?; inline-text list] block-cmd

end = struct

  let inline-join start endd delim ibs =
    let-rec f l =
      match l with
      | [] -> inline-nil
      | [x] -> x
      | x :: xs -> x ++ delim ++ f xs
    in
    start ++ f ibs ++ endd

  let-block ctx +row ?:alignopt its =
    let align = Option.from SpaceEvenly alignopt in
    let ibs = List.map (read-inline ctx) its in
    let ib =
      match align with
      | Start -> inline-join inline-nil inline-fil inline-nil ibs
      | End -> inline-join inline-fil inline-nil inline-nil ibs
      | Center -> inline-join inline-fil inline-fil inline-nil ibs
      | SpaceBetween -> inline-join inline-nil inline-nil inline-fil ibs
      | SpaceEvenly -> inline-join inline-fil inline-fil inline-fil ibs
    in
    line-break true true ctx ib


end
