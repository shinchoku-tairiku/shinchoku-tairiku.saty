@require: math
@require: option
@require: annot
@require: footnote-scheme
@require: code
@require: hdecoset

@import: graphics
@import: context
@import: config
@import: captioned-box
@import: bibliography
@import: table-of-contents
@import: command
@import: side-index
@import: header
@import: preface
@import: headings

@import: itemize

module ShinchokuTairiku : sig

  val document : block-text -> block-text -> document

  direct \cite : [label] inline-cmd

  direct +chapter : [label?; (label * bib-item) list?; inline-text; inline-text; block-text] block-cmd
  direct +section : [label?; inline-text; block-text] block-cmd
  direct +subsection : [label?; inline-text; block-text] block-cmd
  %% TODO: add label
  direct +subsubsection : [inline-text; block-text] block-cmd

end = struct

  let page-shift pginfo (x, y) =
    let l = 3mm in
    match PageSide.of-page-number pginfo#page-number with
    | LeftSide -> (x -' 10pt, y)
    | RightSide -> (x +' 10pt, y)

  let document preface inner =
    %% initial context
    let ctx = Context.default Config.text-width in
    %% module settings
    let () = Headings.add-chapter-changed-listener (fun e ->
      CaptionedBox.set-chapter e#num
    ) in
    let () = Headings.add-chapter-changed-listener (fun e ->
      TableOfContents.add-chapter e#label e#title
    ) in
    let () = Headings.add-section-changed-listener (fun e ->
      TableOfContents.add-section e#label e#title
    ) in
    let () = Headings.add-subsection-changed-listener (fun e ->
      TableOfContents.add-subsection e#label e#title
    ) in
    let () = Headings.add-chapter-page-fixed-listener (fun e ->
      Header.set-chapter e#num e#title e#pbinfo#page-number
    ) in
    let () = Headings.add-section-page-fixed-listener (fun e ->
      %% NOTE: `let (_, num) = e#num in` を外にくくりだすと parse error
      Header.set-section (let (_, num) = e#num in num) e#title e#pbinfo#page-number
    ) in
    %% -- preface --
    let bb-preface = Preface.scheme ctx preface in
    %% -- main --
    let bb-main = read-block ctx inner in
    %% -- table of contents --
    %% this must be after processing bb-main
    let bb-toc = TableOfContents.scheme ctx in
    %% -- page settings --
    let pagecontf pginfo =
      let () = FootnoteScheme.start-page () in
      (|
        text-height = Config.text-height;
        text-origin = page-shift pginfo Config.text-origin;
      |)
    in
    let pagepartsf pbinfo =
      (|
        header-content = Header.scheme pbinfo#page-number;
        header-origin  = page-shift pbinfo Config.header-origin;
        footer-content = block-nil;
        footer-origin  = page-shift pbinfo Config.footer-origin;
      |)
    in
    let page = UserDefinedPaper (Config.page-width, Config.page-height) in
    let bb = bb-preface +++ bb-toc +++ bb-main in
    page-break page pagecontf pagepartsf bb

  let-inline ctx \cite label =
    Bibliography.cite-scheme ctx label

  let-block ctx +chapter ?:labelopt ?:bib-itemsopt it-title it-quote bt-main =
    let label = Label.or-fresh labelopt in
    let bib-items = Option.from [] bib-itemsopt in
    Headings.chapter-scheme ctx label bib-items it-title it-quote bt-main

  let-block ctx +section ?:labelopt it-title bt-main =
    let label = Label.or-fresh labelopt in
    Headings.section-scheme ctx label it-title bt-main

  let-block ctx +subsection ?:labelopt it-title bt-main =
    let label = Label.or-fresh labelopt in
    Headings.subsection-scheme ctx label it-title bt-main

  let-block ctx +subsubsection it-title bt-main =
    let label = Label.fresh () in
    Headings.subsubsection-scheme ctx label it-title bt-main

end

let document = ShinchokuTairiku.document
