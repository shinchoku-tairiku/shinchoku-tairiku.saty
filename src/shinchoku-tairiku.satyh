@require: math
@require: option
@require: annot
@require: footnote-scheme
@require: code
@require: hdecoset

@import: graphics
@import: context
@import: config
@import: captioned-box
@import: bibliography
@import: table-of-contents
@import: header
@import: preface
@import: headings
@import: footnote
@import: theorem
@import: flex

@import: itemize

module ShinchokuTairiku : sig

  val document : block-text -> block-text -> document

  direct \cite : [label] inline-cmd
  direct \footnote : [inline-text] inline-cmd
  direct \emph : [inline-text] inline-cmd
  direct \url : [string] inline-cmd
  direct \minipage : [float; block-text] inline-cmd
  direct \code : [string] inline-cmd
  direct \line-break : [] inline-cmd
  direct \ref : [label] inline-cmd

  direct +chapter : [label?; (label * bib-item) list?; inline-text; inline-text; block-text] block-cmd
  direct +section : [label?; inline-text; block-text] block-cmd
  direct +subsection : [label?; inline-text; block-text] block-cmd
  %% TODO: add label
  direct +subsubsection : [inline-text; block-text] block-cmd
  direct +p : [inline-text] block-cmd
  direct +figure : [label?; length?; string; inline-text] block-cmd
  direct +code : [label?; string; inline-text] block-cmd
  direct +table : [label?; (inline-text list) list; inline-text ] block-cmd
  direct +theorem : [inline-text?; label?; inline-text] block-cmd
  direct +proof : [inline-text?; block-text] block-cmd
  direct +column : [inline-text; block-text] block-cmd
  direct +row : [flex-align?; inline-text list] block-cmd

end = struct

  let page-shift pginfo (x, y) =
    let l = 3mm in
    match PageSide.of-page-number pginfo#page-number with
    | LeftSide -> (x -' 10pt, y)
    | RightSide -> (x +' 10pt, y)

  let document preface inner =
    %% initial context
    let ctx = Context.default Config.text-width in
    %% module settings
    let () = Headings.add-chapter-changed-listener (fun e ->
      CaptionedFigure.update-base-num e#num
    ) in
    let () = Headings.add-chapter-changed-listener (fun e ->
      CaptionedCode.update-base-num e#num
    ) in
    let () = Headings.add-chapter-changed-listener (fun e ->
      CaptionedTable.update-base-num e#num
    ) in
    let () = Headings.add-chapter-changed-listener (fun e ->
      TableOfContents.add-chapter e#label e#title
    ) in
    let () = Headings.add-section-changed-listener (fun e ->
      TableOfContents.add-section e#label e#title
    ) in
    let () = Headings.add-subsection-changed-listener (fun e ->
      TableOfContents.add-subsection e#label e#title
    ) in
    let () = Headings.add-chapter-page-fixed-listener (fun e ->
      Header.set-chapter e#num e#title e#pbinfo#page-number
    ) in
    let () = Headings.add-section-page-fixed-listener (fun e ->
      %% NOTE: `let (_, num) = e#num in` を外にくくりだすと parse error
      Header.set-section (let (_, num) = e#num in num) e#title e#pbinfo#page-number
    ) in
    %% -- preface --
    let bb-preface = Preface.scheme ctx preface in
    %% -- main --
    let bb-main = read-block ctx inner in
    %% -- table of contents --
    %% this must be after processing bb-main
    let bb-toc = TableOfContents.scheme ctx in
    %% -- page settings --
    let pagecontf pginfo =
      let () = FootnoteScheme.start-page () in
      (|
        text-height = Config.text-height;
        text-origin = page-shift pginfo Config.text-origin;
      |)
    in
    let pagepartsf pbinfo =
      (|
        header-content = Header.scheme pbinfo#page-number;
        header-origin  = page-shift pbinfo Config.header-origin;
        footer-content = block-nil;
        footer-origin  = page-shift pbinfo Config.footer-origin;
      |)
    in
    let page = UserDefinedPaper (Config.page-width, Config.page-height) in
    let bb = bb-preface +++ bb-toc +++ bb-main in
    page-break page pagecontf pagepartsf bb

  %%
  %% inline commands
  %%

  let-inline ctx \cite label =
    Bibliography.cite-scheme ctx label

  let-inline ctx \footnote it =
    Footnote.scheme ctx it

  let-inline ctx \emph it =
    let ctx = Context.set-font Config.font-cjk-gothic ctx in
    read-inline ctx it

  let-inline ctx \url url =
    let ctx = Context.set-latin-font Config.font-mono ctx in
    read-inline ctx {\href(url)(embed-string url);}

  let-inline ctx \code code =
    let pads = (4pt, 4pt, 4pt, 4pt) in
    let decoset = HDecoSet.rectangle-round-fill 2pt 2pt (Color.gray 0.95) in
    let ctx = Context.set-latin-font Config.font-mono ctx in
    let ib =
      embed-string code
      |> read-inline ctx
      |> inline-frame-breakable pads decoset
    in
    script-guard Latin ib

  let-inline ctx \minipage ratio inner =
    let width = get-text-width ctx *' ratio in
    embed-block-top ctx width (fun ctx -> read-block ctx inner)

  let-inline ctx \line-break =
    discretionary (0 - 10000) inline-nil inline-fil inline-nil

  let-inline ctx \ref label =
    RefNum.get label
    |> embed-string
    |> read-inline ctx
    |> Link.to label

  %%
  %% block commands
  %%

  let-block ctx +chapter ?:labelopt ?:bib-itemsopt it-title it-quote bt-main =
    let label = Label.or-fresh labelopt in
    let bib-items = Option.from [] bib-itemsopt in
    Headings.chapter-scheme ctx label bib-items it-title it-quote bt-main

  let-block ctx +section ?:labelopt it-title bt-main =
    let label = Label.or-fresh labelopt in
    Headings.section-scheme ctx label it-title bt-main

  let-block ctx +subsection ?:labelopt it-title bt-main =
    let label = Label.or-fresh labelopt in
    Headings.subsection-scheme ctx label it-title bt-main

  let-block ctx +subsubsection it-title bt-main =
    let label = Label.fresh () in
    Headings.subsubsection-scheme ctx label it-title bt-main

  let-block ctx +p it =
    let ib = inline-skip 10pt ++ read-inline ctx it ++ inline-fil in
    form-paragraph ctx ib

  %% TODO: PDF 以外も受け取れるようにする or PDF のみであることを明示
  let-block ctx +figure ?:labelopt ?:widthopt path caption =
    let label = Label.or-fresh labelopt in
    let width = Option.from (get-text-width ctx *' 0.5) widthopt in
    CaptionedFigure.pdf-scheme ctx label width path caption

  let-block ctx +code ?:labelopt code caption =
    let label = Label.or-fresh labelopt in
    CaptionedCode.scheme ctx label code caption

  let-block ctx +table ?:labelopt ll caption =
    let label = Label.or-fresh labelopt in
    CaptionedTable.scheme ctx label ll caption

  let-block ctx +theorem ?:wordopt ?:labelopt inner =
    let label = Label.or-fresh (Option.map (fun l -> `theorem:` ^ l) labelopt) in
    Theorem.theorem-scheme ctx label {Theorem} wordopt inner

  let-block ctx +proof ?:wordopt inner =
    Theorem.proof-scheme ctx wordopt inner

  let-block ctx +column title inner =
    let title-scheme ctx =
      let ctx =
        ctx
        |> Context.set-font Config.font-cjk-gothic-bold
        |> set-font-size Config.font-size-large
        |> set-paragraph-margin 10pt 10pt
      in
      read-inline ctx {コラム:} ++ inline-skip 3pt ++ read-inline ctx title
      |> line-break true false ctx
    in
    let inner-scheme ctx =
      let ctx = set-paragraph-margin Config.paragraph-margin-top Config.paragraph-margin-bottom ctx in
      read-block ctx inner
    in
    let decoset = VDecoSet.simple-frame-stroke 1pt (Color.gray 0.5) in
    let pads = (8pt, 8pt, 8pt, 8pt) in
    let ctx-outer = set-paragraph-margin 20pt 20pt ctx in
    block-frame-breakable ctx-outer pads decoset
      (fun ctx -> title-scheme ctx +++ inner-scheme ctx)

  %% TODO: rename. like flex
  let-block ctx +row ?:alignopt its =
    let align = Option.from SpaceEvenly alignopt in
    Flex.inline-scheme ctx align its

end

let document = ShinchokuTairiku.document
