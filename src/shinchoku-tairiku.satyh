@require: math
@require: option
@require: annot
@require: footnote-scheme
@require: code
@require: hdecoset

@import: util
@import: context
@import: config
@import: captioned-box
@import: bibliography
@import: table-of-contents
@import: command
@import: side-index

@import: itemize

module ShinchokuTairiku : sig

  val document : block-text -> block-text -> document

end = struct

  let get-default-context width =
    get-initial-context width (command \math)
    |> set-dominant-wide-script Kana
    |> set-language Kana Japanese
    |> set-language HanIdeographic Japanese
    |> set-dominant-narrow-script Latin
    |> set-language Latin English
    |> Context.set-font Config.font-cjk-mincho
    |> set-font-size Config.font-size-normal
    |> set-leading Config.leading-space
    |> set-min-paragraph-ascender-and-descender 0pt 0pt
    |> set-paragraph-margin Config.paragraph-margin-top Config.paragraph-margin-bottom

  let make-preface ctx inner =
    let ctx-title =
      ctx
      |> Context.set-font Config.font-cjk-gothic-bold
      |> set-font-size 24pt
      |> set-paragraph-margin 30pt 30pt
    in
    let bb-title =
      inline-fil ++ read-inline ctx-title {はじめに}
      |> line-break false false ctx-title
    in
    let bb-inner = read-block ctx inner in
    bb-title +++ bb-inner +++ block-skip 30pt

  let-mutable current-chapter-ref <- (0, 0, {})
  let-mutable current-section-ref <- (0, 0, {})
  let set-current-chapter pnum num title =
    current-chapter-ref <- (pnum, num, title)
  let set-current-section pnum num title =
    current-section-ref <- (pnum, num, title)

  let make-side-index ctx side =
    let (_, num, _) = !current-chapter-ref in
    let ib = SideIndex.make ctx side num in
    line-break false false ctx ib

  let make-chapter-title ctx =
    let (_, num, it-title) = !current-chapter-ref in
    let it-num = embed-string (`第` ^ arabic num ^ `章`) in
    let ctx = Context.set-font Config.font-cjk-gothic-bold ctx in
    read-inline ctx it-num
    ++ inline-skip 10pt
    ++ read-inline ctx it-title

  let make-section-title ctx =
    let (_, chapter-num, _) = !current-chapter-ref in
    let (_, section-num, it-title) = !current-section-ref in
    let it-num = embed-string (arabic chapter-num ^ `.` ^ arabic section-num) in
    let ctx = Context.set-font Config.font-cjk-gothic-bold ctx in
    read-inline ctx it-num
    ++ inline-skip 10pt
    ++ read-inline ctx it-title

  let make-header pnum =
    let ctx = get-default-context Config.header-width in
    let side = PageSide.of-page-number pnum in
    let bb-side-index = make-side-index ctx side in
    let (chapter-pnum, chapter-num, _) = !current-chapter-ref in
    if chapter-pnum == 0 || chapter-pnum == pnum then bb-side-index else
    let ib-pnum = read-inline ctx (embed-string (arabic pnum)) in
    let page-part-width = (Config.header-width -' Config.text-width) *' 0.5 in
    let page-skip-width = page-part-width -' get-natural-width ib-pnum in
    let ib-main =
      match side with
      | LeftSide ->
        let ib = make-chapter-title ctx in
        ib-pnum ++ inline-skip page-skip-width ++ ib ++ inline-fil
      | RightSide ->
        let ib = make-section-title ctx in
        inline-fil ++ ib ++ inline-skip page-skip-width ++ ib-pnum
    in
    let ctx-main = ctx |> set-paragraph-margin 0pt 5pt in
    let bb-main = line-break false false ctx-main ib-main in
    let ib-line = inline-fil ++ Util.draw-horizontal-line Config.text-width 0pt 0pt ++ inline-fil in
    let ctx-line = ctx |> set-paragraph-margin 0pt 0pt in
    let bb-line = line-break false false ctx-line ib-line in
    bb-side-index +++ bb-main +++ bb-line

  let make-footer = block-nil

  let page-shift pginfo (x, y) =
    let l = 3mm in
    match PageSide.of-page-number pginfo#page-number with
    | LeftSide -> (x -' 10pt, y)
    | RightSide -> (x +' 10pt, y)

  let document preface inner =
    %% initial context
    let ctx = get-default-context Config.text-width in
    %% module settings
    let () = ShinchokuTairikuToc.register-chapter-hook CaptionedBox.set-chapter in
    let () = ShinchokuTairikuToc.register-page-chapter-hook set-current-chapter in
    let () = ShinchokuTairikuToc.register-page-section-hook set-current-section in
    %% -- preface --
    let bb-preface = make-preface ctx preface in
    %% -- main --
    let bb-main = read-block ctx inner in
    %% -- table of contents --
    %% this must be after processing bb-main
    let bb-toc = ShinchokuTairikuToc.make ctx in
    %% -- page settings --
    let pagecontf pginfo =
      let () = FootnoteScheme.start-page () in
      (|
        text-height = Config.text-height;
        text-origin = page-shift pginfo Config.text-origin;
      |)
    in
    let pagepartsf pginfo =
      (|
        header-content = make-header pginfo#page-number;
        header-origin  = page-shift pginfo Config.header-origin;
        footer-content = make-footer;
        footer-origin  = page-shift pginfo Config.footer-origin;
      |)
    in
    let page = UserDefinedPaper (Config.page-width, Config.page-height) in
    let bb = bb-preface +++ bb-toc +++ bb-main in
    page-break page pagecontf pagepartsf bb

end

let document = ShinchokuTairiku.document
