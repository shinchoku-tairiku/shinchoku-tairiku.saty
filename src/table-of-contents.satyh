@import: link
@import: label

module TableOfContents : sig

  val scheme : context -> block-boxes

  %% 指定のラベルにより RefNum で参照番号が、RefPage でページ番号が、
  %% Link でロケーションフレームが登録されている必要がある
  val add-chapter : label -> inline-text -> unit
  val add-section : label -> inline-text -> unit
  val add-subsection : label -> inline-text -> unit

end = struct

  type it-title = inline-text
  type page-number = int
  type toc-type =
    | Chapter
    | Section
    | Subsection
  type toc-info = toc-type * label * it-title

  let-mutable toc-acc-ref <- []

  let add-toc-info typ label it-title =
    toc-acc-ref <- (typ, label, it-title) :: !toc-acc-ref

  let add-chapter = add-toc-info Chapter
  let add-section = add-toc-info Section
  let add-subsection = add-toc-info Subsection

  %% -- toc --

  let toc-title-context ctx =
    ctx
    |> Context.set-cjk-font Config.font-cjk-gothic-bold
    |> set-font-size 24pt

  let basic-toc-context ctx =
    ctx
    |> set-paragraph-margin 8pt 8pt

  let chapter-toc-context ctx =
    ctx
    |> basic-toc-context
    |> Context.set-font Config.font-cjk-gothic-bold
    |> set-font-size Config.font-size-large
    |> set-paragraph-margin 30pt 12pt

  let title-scheme ctx =
    let ctx = toc-title-context ctx in
    let ib = inline-fil ++ read-inline ctx {目次} in
    block-skip 20pt
    +++ line-break false false ctx ib
    +++ block-skip 30pt

  let-rec repeat-inline n ib =
    if n == 0 then
      inline-nil
    else
      ib ++ repeat-inline (n - 1) ib

  let dots-line-scheme ctx width =
    let ib = read-inline ctx {.} ++ inline-skip 1pt in
    let unit-width = get-natural-width ib in
    let n = round (width /' unit-width) in
    inline-fil ++ repeat-inline n ib

  let toc-line-scheme ctx (typ, label, it-title) =
    let ctx =
      match typ with
      | Chapter -> chapter-toc-context ctx
      | _ -> basic-toc-context ctx
    in
    %% title
    let s-num = RefNum.get label in
    let ib-title =
      match typ with
      | Chapter ->
        read-inline ctx (embed-string (`第` ^ s-num ^ `章`))
        ++ inline-skip 14pt
        ++ read-inline ctx it-title
      | Section ->
        inline-skip 20pt
        ++ read-inline ctx (embed-string s-num)
        ++ inline-skip 6pt
        ++ read-inline ctx it-title
        ++ inline-skip 3pt
      | Subsection ->
        inline-skip 40pt
        ++ read-inline ctx (embed-string s-num)
        ++ inline-skip 6pt
        ++ read-inline ctx it-title
        ++ inline-skip 3pt
    in
    %% pnum
    let s-pnum = RefPage.get label in
    let it-pnum = embed-string s-pnum in
    let ib-page =
      inline-skip 3pt
      ++ read-inline ctx it-pnum
    in
    %% middle
    let ib-middle =
      match typ with
      | Chapter -> inline-fil
      | _ ->
        let width = get-text-width ctx -' get-natural-width ib-title -' get-natural-width ib-page in
        if width <' 0pt then inline-fil else dots-line-scheme ctx width
    in
    %% finalize
    ib-title ++ ib-middle ++ ib-page
    |> Link.to label
    |> line-break true true ctx

  let body-scheme ctx =
    let toc-infos = !toc-acc-ref |> List.reverse in
    let f bb info = bb +++ toc-line-scheme ctx info in
    toc-infos |> List.fold-left f block-nil

  let scheme ctx =
    let bb-title = title-scheme ctx in
    let bb-body = body-scheme ctx in
    bb-title +++ bb-body

end
