@import: util
@import: bibliography
@import: link
@import: label

module ShinchokuTairikuToc : sig

  val make : context -> block-boxes
  val register-chapter-hook : (int -> unit) -> unit
  val register-page-chapter-hook : (int -> int -> inline-text -> unit) -> unit
  val register-page-section-hook : (int -> int -> inline-text -> unit) -> unit
  direct +chapter : [string?; (string * bib-item) list?; inline-text; inline-text; block-text] block-cmd
  direct +section : [string?; inline-text; block-text] block-cmd
  direct +subsection : [string?; inline-text; block-text] block-cmd
  direct +subsubsection : [inline-text; block-text] block-cmd

end = struct

  type label = string
  type toc-num = string
  type it-title = inline-text
  type page-number = int
  type toc-type =
    | Chapter
    | Section
    | Subsection
  type toc-info = toc-type * label * toc-num * it-title

  let-mutable toc-acc-ref <- []

  let set-toc-info typ label num it-title =
    let () = register-cross-reference (label ^ `:num`) num in
    toc-acc-ref <- (typ, label, num, it-title) :: !toc-acc-ref

  let get-page-number label =
    match get-cross-reference (label ^ `:page`) with
    | None -> `?`
    | Some p -> p

  let set-page-number label pginfo =
    register-cross-reference (label ^ `:page`) (arabic pginfo#page-number)

  %% -- hook --

  let-mutable chapter-hooks-ref <- []
  let register-chapter-hook f =
    chapter-hooks-ref <- f :: !chapter-hooks-ref

  let-mutable page-chapter-hooks-ref <- []
  let register-page-chapter-hook f =
    page-chapter-hooks-ref <- f :: !page-chapter-hooks-ref

  let-mutable page-section-hooks-ref <- []
  let register-page-section-hook f =
    page-section-hooks-ref <- f :: !page-section-hooks-ref

  %% -- toc --

  let set-toc-title-context ctx =
    ctx
    |> Context.set-cjk-font Config.font-cjk-gothic-bold
    |> set-font-size 24pt

  let set-basic-toc-context ctx =
    ctx
    |> set-paragraph-margin 8pt 8pt

  let set-chapter-toc-context ctx =
    ctx
    |> set-basic-toc-context
    |> Context.set-font Config.font-cjk-gothic-bold
    |> set-font-size Config.font-size-large
    |> set-paragraph-margin 30pt 12pt

  let make-title ctx =
    let ctx = set-toc-title-context ctx in
    let ib = inline-fil ++ read-inline ctx {目次} in
    block-skip 20pt
    +++ line-break false false ctx ib
    +++ block-skip 30pt

  let-rec repeat-inline n ib =
    if n == 0 then
      inline-nil
    else
      ib ++ repeat-inline (n - 1) ib

  let make-dots-line ctx width =
    let ib = read-inline ctx {.} ++ inline-skip 1pt in
    let unit-width = get-natural-width ib in
    let n = round (width /' unit-width) in
    inline-fil ++ repeat-inline n ib

  let make-toc-line ctx (typ, label, num, it-title) =
    let ctx =
      match typ with
      | Chapter -> set-chapter-toc-context ctx
      | _ -> set-basic-toc-context ctx
    in
    let pnum = get-page-number label in
    let it-page = embed-string pnum in
    let ib-title =
      match typ with
      | Chapter ->
        read-inline ctx (embed-string (`第` ^ num ^ `章`))
        ++ inline-skip 14pt
        ++ read-inline ctx it-title
      | Section ->
        inline-skip 20pt
        ++ read-inline ctx (embed-string num)
        ++ inline-skip 6pt
        ++ read-inline ctx it-title
        ++ inline-skip 3pt
      | Subsection ->
        inline-skip 40pt
        ++ read-inline ctx (embed-string num)
        ++ inline-skip 6pt
        ++ read-inline ctx it-title
        ++ inline-skip 3pt
    in
    let ib-page =
      inline-skip 3pt
      ++ read-inline ctx it-page
    in
    let ib-middle =
      match typ with
      | Chapter -> inline-fil
      | _ ->
        let width = get-text-width ctx -' get-natural-width ib-title -' get-natural-width ib-page in
        if width <' 0pt then inline-fil else make-dots-line ctx width
    in
    let ib = Link.to label (ib-title ++ ib-middle ++ ib-page) in
    line-break true true ctx ib

  let make-body ctx =
    let toc-infos = !toc-acc-ref |> List.reverse in
    let f bb info = bb +++ make-toc-line ctx info in
    toc-infos |> List.fold-left f block-nil

  let make ctx =
    let bb-title = make-title ctx in
    let bb-body = make-body ctx in
    bb-title +++ bb-body

  %% -- scheme --

  let-mutable num-chapter-ref <- 0
  let-mutable num-section-ref <- 0
  let-mutable num-subsection-ref <- 0

  let set-chapter-num-context ctx =
    ctx
    |> Context.set-font Config.font-cjk-gothic-bold
    |> set-font-size 20pt

  let set-chapter-title-context ctx =
    ctx
    |> Context.set-font Config.font-cjk-gothic-bold
    |> set-font-size 30pt

  let set-section-context ctx =
    ctx
    |> Context.set-font Config.font-cjk-gothic-bold
    |> set-font-size Config.font-size-huge

  let set-subsection-context ctx =
    ctx
    |> Context.set-font Config.font-cjk-gothic-bold
    |> set-font-size Config.font-size-large
    |> set-paragraph-margin 20pt 12pt

  let set-subsubsection-context ctx =
    ctx
    |> Context.set-font Config.font-cjk-gothic-bold
    |> set-font-size Config.font-size-normal
    |> set-paragraph-margin 18pt 10pt

  let section-scheme ctx label it-title k =
    %% reset nums
    let () = increment num-section-ref in
    let () = num-subsection-ref <- 0 in
    %% num & title
    let num = arabic (!num-chapter-ref) ^ `.` ^ arabic (!num-section-ref) in
    %% set info
    let () = set-toc-info Section label num it-title in
    %% bb-title
    let ctx-title = set-section-context ctx in
    let it-num = embed-string num in
    let section-num = !num-section-ref in
    let page-hook pginfo _ =
      let () = set-page-number label pginfo in
      List.iter (fun f -> f pginfo#page-number section-num it-title) !page-section-hooks-ref
    in
    let ib-title =
      read-inline ctx-title it-num
      ++ inline-skip 6pt
      ++ read-inline ctx-title it-title
      ++ hook-page-break page-hook
    in
    let bb-title = Link.set label ib-title |> line-break true false (ctx |> set-paragraph-margin 24pt 6pt) in
    let bb-line =
      Util.draw-horizontal-line (get-text-width ctx) 0pt 0pt
      |> line-break false false (ctx |> set-paragraph-margin 6pt 16pt)
    in
    let bb-main = k ctx in
    bb-title +++ bb-line +++ bb-main

  let-block ctx +section ?:labelopt it-title inner =
    let label = Label.or-fresh labelopt in
    let k ctx = read-block ctx inner in
    section-scheme ctx label it-title k

  let chapter-scheme ctx label bib-items it-title it-quote k =
    %% reset nums
    let () = increment num-chapter-ref in
    let () = num-section-ref <- 0 in
    let () = num-subsection-ref <- 0 in
    %% num
    let num = arabic (!num-chapter-ref) in
    let human-num = `第` ^ num ^ `章` in
    %% set info
    let () = set-toc-info Chapter label num it-title in
    let () = List.iter (fun f -> f !num-chapter-ref) !chapter-hooks-ref in
    %% bb-num
    let ctx-num = set-chapter-num-context ctx in
    let it-num = embed-string human-num in
    let chapter-num = !num-chapter-ref in
    let page-hook pginfo _ =
      let () = set-page-number label pginfo in
      List.iter (fun f -> f pginfo#page-number chapter-num it-title) !page-chapter-hooks-ref
    in
    let ib-num =
      read-inline ctx-num it-num
      ++ hook-page-break page-hook
    in
    let bb-num = Link.set label ib-num |> line-break true false ctx in
    %% title
    let ctx-title = set-chapter-title-context ctx in
    let ib-title = read-inline ctx-title it-title in
    let bb-title = line-break false false ctx-title ib-title in
    %% quote
    let ctx-quote = ctx in
    let ib-quote = inline-fil ++ read-inline ctx-quote it-quote in
    let bb-quote = line-break false false ctx-quote ib-quote in
    %% main
    let bb-main = k ctx in
    %% bib
    let bb-bib =
      match bib-items with
      | [] -> block-nil
      | _ ->
        let bib-label = Label.or-fresh None in
        let k-bib ctx = Bibliography.make ctx bib-items in
        section-scheme ctx bib-label {参考文献} k-bib
    in
    %% finalize
    [
      clear-page;
      block-skip 20pt;
      bb-num;
      block-skip 8pt;
      bb-title;
      block-skip 12pt;
      bb-quote;
      block-skip 28pt;
      bb-main;
      bb-bib;
    ] |> List.fold-left (+++) block-nil

  let-block ctx +chapter ?:labelopt ?:bib-itemsopt it-title it-quote inner =
    let label = Label.or-fresh labelopt in
    let bib-items = Option.from [] bib-itemsopt in
    let k ctx = read-block ctx inner in
    chapter-scheme ctx label bib-items it-title it-quote k

  let subsection-scheme ctx label it-title k =
    %% reset nums
    let () = increment num-subsection-ref in
    %% num & title
    let num =
      arabic (!num-chapter-ref)
      ^ `.`
      ^ arabic (!num-section-ref)
      ^ `.`
      ^ arabic (!num-subsection-ref)
    in
    %% set info
    let () = set-toc-info Subsection label num it-title in
    %% bb-title
    let ctx-title = set-subsection-context ctx in
    let ib-title =
      read-inline ctx-title it-title
      ++ hook-page-break (fun pginfo _ -> set-page-number label pginfo)
    in
    let bb-title = Link.set label ib-title |> line-break true false ctx-title in
    let bb-main = k ctx in
    bb-title +++ bb-main

  let-block ctx +subsection ?:labelopt it-title inner =
    let label = Label.or-fresh labelopt in
    let k ctx = read-block ctx inner in
    subsection-scheme ctx label it-title k

  let subsubsection-scheme ctx it-title k =
    let ctx-title = set-subsubsection-context ctx in
    let ib-title = read-inline ctx-title it-title in
    let bb-title = line-break true false ctx-title ib-title in
    let bb-main = k ctx in
    bb-title +++ bb-main

  let-block ctx +subsubsection it-title inner =
    let k ctx = read-block ctx inner in
    subsubsection-scheme ctx it-title k

end
